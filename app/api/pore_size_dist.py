# Pore Size Distribution API Endpoint
# Author: Shibo Li
# Date: 2025-06-16
# Version: 0.2.0


from fastapi import APIRouter, UploadFile, File, Form, HTTPException, status
from typing import Optional
from app.models.pore_size_dist import PoreSizeDistResponse
from app.utils.parser import parse_psd_from_text
from app.utils.file import save_uploaded_file
from app.core.runner import ZeoRunner
from app.utils.logger import logger

router = APIRouter()
runner = ZeoRunner()

@router.post(
    "/api/pore_size_dist",
    response_model=PoreSizeDistResponse,
    summary="Calculate Pore Size Distribution (psd)",
    tags=["Analysis"]
)
async def compute_pore_size_dist(
    structure_file: UploadFile = File(..., description="A .cif, .cssr, .v1, or .arc file."),
    probe_radius: float = Form(1.21, description="Radius of the probe for MC sampling. Must be <= chan_radius."),
    chan_radius: Optional[float] = Form(None, description="Radius for accessibility check. Defaults to probe_radius."),
    samples: int = Form(50000, description="Number of Monte Carlo samples per unit cell for integration."),
    ha: bool = Form(True, description="Enable high accuracy mode."),
):
    """
    Calculates the pore size distribution histogram.
    Corresponds to the `-psd` flag in Zeo++.
    """
    task_name = "pore_size_dist"
    logger.info(f"[{task_name}] Received new request.")

    effective_chan_radius = chan_radius if chan_radius is not None else probe_radius
    if probe_radius > effective_chan_radius:
        raise HTTPException(
            status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
            detail=f"Invalid radii: probe_radius ({probe_radius}) cannot be greater than chan_radius ({effective_chan_radius})."
        )

    input_path = save_uploaded_file(structure_file, prefix=task_name)

    base_output_filename = f"{input_path.stem}.psd"
    final_output_filename = f"{input_path.stem}.psd_histo"

    zeo_args = [
        "-psd",
        str(effective_chan_radius),
        str(probe_radius),
        str(samples),
        base_output_filename
    ]
    if ha:
        zeo_args.insert(0, "-ha")

    final_runner_args = zeo_args + [input_path.name]
 
    logger.info(f"[{task_name}] Running Zeo++ with args: {' '.join(final_runner_args)}")
    
    result = runner.run_command(
        structure_file=input_path,
        zeo_args=final_runner_args,
        output_files=[final_output_filename],
        extra_identifier=task_name
    )

    if not result["success"]:
        error_detail = f"Zeo++ exited with code {result['exit_code']}."
        stderr_content = result.get("stderr", "No stderr output.")
        logger.display_error_panel(f"{task_name} Failed", f"{error_detail}\n\n{stderr_content}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail={"message": f"Zeo++ execution failed for {task_name}", "stderr": stderr_content}
        )

    output_text = result["output_data"].get(final_output_filename)
    if output_text is None:
        error_msg = f"Output file '{final_output_filename}' was not generated by Zeo++."
        logger.display_error_panel(f"{task_name} Failed", error_msg)
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=error_msg)

    try:
        parsed_data = parse_psd_from_text(output_text)
    except ValueError as e:
        error_msg = f"Error while parsing '{final_output_filename}':\n{e}"
        logger.display_error_panel(f"{task_name} Parsing Failed", error_msg)
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"Failed to parse Zeo++ output: {e}")

    final_data = {**parsed_data, "cached": result["cached"]}
    logger.success(f"[{task_name}] Task completed successfully.")
    logger.display_data_as_table(final_data, f"Result for {task_name}")
    
    return PoreSizeDistResponse(**final_data)